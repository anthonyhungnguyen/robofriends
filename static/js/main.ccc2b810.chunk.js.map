{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions/actions.js","constants/constants.js","serviceWorker.js","reducers/reducers.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","ErrorBoundry_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ccc2b810.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robot1' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((user, i) => {\r\n\t\t\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='type something'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n\treturn <div style={{ overflow: 'scroll', border: '2px solid black', height: '800px' }}>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn this.state.hasError ? <h1>Ooooops. That is not good</h1> : this.props.children;\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions/actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField : state.searchRobots.searchField,\r\n\t\trobots      : state.requestRobots.robots,\r\n\t\tisPending   : state.requestRobots.isPending,\r\n\t\terror       : state.requestRobots.error\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChange  : event => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots : () => dispatch(requestRobots())\r\n\t};\r\n};\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\t\treturn isPending ? (\r\n\t\t\t<h1>Loading</h1>\r\n\t\t) : (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1> RoboFriends </h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from '../constants/constants';\r\n\r\nexport const setSearchField = text => ({\r\n\ttype    : CHANGE_SEARCH_FIELD,\r\n\tpayload : text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from '../constants/constants';\r\nconst initialStateSearch = {\r\n\tsearchField : ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn { ...state, searchField: action.payload };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst initialStateRobots = {\r\n\tisPending : false,\r\n\trobots    : [],\r\n\terror     : ''\r\n};\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn { ...state, isPending: true };\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn { ...state, robots: action.payload, isPending: false };\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn { ...state, error: action.payload, isPending: false };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers/reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}